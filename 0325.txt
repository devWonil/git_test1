1. 객체와 객체간에 상호 작용하게 코딩한다
2. 객체와 객체의 관계를 형성해서 코딩한다

// 1, 2, 3... --> UserInfo
public Bus takeBus(Bus bus){
	bus.take();
	UserInfo userInfo = new UserInfo();
	//메소드에 리턴타입을 묶음으로 던지고 싶다면
	//클래스 타입
	return new Bus();
}

// 접근 제어지시자 4가지 (정보 은닉)
// 캡슐화 -> (메소드 접근 제어지시자 사용가능)
// 자판기 (클래스)
// 버튼 입력 --> (외부에 허용되는 기능)
// 캔커피 기능 ()
// 컵을 내린다 ()
// 뜨거운 물을 넣는다 ()
// 재료 넣는다 ()

static --> 태양 (한개 - 객체들 공유하는 데이터)

static 변수 -> 객체와 객체들 공유해야하는 데이터가 필요할 때
--> 프로그램이 시작할 때 메모리에 할당되고 종료 시 사라짐

질럿 마린 저글링
공격력 생명력(0이되면 사망)

1. 유닛 선택 (유닛을 선택하세요)
//2. 부대 선택 (몇 마리 선택하시겠습니까?)
2. 공격할 유닛 선택 (어떤 유닛을 공격하시겠습니까?)
3. 공격횟수 선택 (몇 번 공격하시겠습니까?)
4. 상태출력

추가과제
1. 프로그램 종료여부 생성
2. 유닛이 사망하면 공격중지


